#pragma once

#ifdef WIN32
#define __align__(X) __declspec(align(X))
#else
#define __align__(X) __attribute__((aligned(X)))
#endif

template <typename T>
struct Record {
    __align__(OPTIX_SBT_RECORD_ALIGNMENT) char header[OPTIX_SBT_RECORD_HEADER_SIZE];
    T data;
};

struct Empty {
};

typedef Record<Empty>   RayGenSbtRecord;
typedef Record<Empty>     MissSbtRecord;
typedef Record<Empty> HitGroupSbtRecord;

#define OPTIX_CHECK( call )                                                    \
    do                                                                         \
    {                                                                          \
        OptixResult res = call;                                                \
        if( res != OPTIX_SUCCESS )                                             \
        {                                                                      \
            std::stringstream ss;                                              \
            ss << "Optix call '" << #call << "' failed with code("             \
               << res << "): " __FILE__ ":"                                    \
               << __LINE__ << ")\n";                                           \
            fprintf(stderr, "[OptiX Error] %s\n", ss.str().c_str());           \
            return res;                                                        \
        }                                                                      \
    } while( 0 )

#define OPTIX_CHECK_LOG( call )                                                \
    do                                                                         \
    {                                                                          \
        OptixResult res = call;                                                \
        const size_t sizeof_log_returned = logSize;                            \
        logSize = sizeof( log ); /* reset sizeof_log for future calls */       \
        if( res != OPTIX_SUCCESS )                                             \
        {                                                                      \
            std::stringstream ss;                                              \
            ss << "Optix call '" << #call << "' failed with code("             \
            << res << "): " __FILE__ ":"                                       \
               << __LINE__ << ")\nLog:\n" << log                               \
               << ( sizeof_log_returned > sizeof( log ) ? "<TRUNCATED>" : "" ) \
               << "\n";                                                        \
            fprintf(stderr, "[OptiX Error] %s\n", ss.str().c_str());           \
            return res;                                                        \
        }                                                                      \
    } while( 0 )


struct Scene {
    Scene() {
        accelerationStructureHandle = 0;
        memory = 0;
        hash = uint64_t(-1);
    }
    ~Scene() {
        freeMem();
    }
    void freeMem() {
        if (memory) {
            cuMemFree(memory);
            memory = 0;
        }
    }

    uint64_t hash;
    CUdeviceptr memory;
    OptixTraversableHandle accelerationStructureHandle;
};

struct State {
    OptixDeviceContext          context = 0;
    Scene                       scene;

    OptixPipelineCompileOptions pipeline_compile_options = {};
    OptixModule                 ptx_module = 0;
    OptixPipeline               pipeline = 0;

    OptixProgramGroup raygen = 0;
    OptixProgramGroup miss = 0;
    OptixProgramGroup hit = 0;

    OptixShaderBindingTable sbt = {};

    CUdeviceptr d_params = 0;

    CUdeviceptr d_rays = 0;
    size_t d_rays_size = 0;
    CUdeviceptr d_hits = 0;
    size_t d_hits_size = 0;

    struct {
        CUdevice device = 0;
        CUstream stream = 0;
        CUcontext context = 0;
    } cuda;

    bool valid = false;
};

inline void checkCuda(int err, const char* msg, const char* fn, int line) {
    if (!msg) {
        fprintf(stderr, "CUDA Error[%d] at %s[%d]\n", err, fn, line);
    }
    else {
        fprintf(stderr, "CUDA Error[%d] at %s[%d] : %s\n", err, fn, line, msg);
    }
}

#define CHECK_CUDA_LOG(err, msg) \
    do { \
        if (err != CUDA_SUCCESS) { \
            checkCuda(int(err), msg, __FUNCTION__, __LINE__); \
            return err; \
        }\
    } while (false)

#define CHECK_CUDA(err) CHECK_CUDA_LOG(err, "")


// Our GPU source code

static const uint32_t buff[] = { 0x2f0a2f2f, 0x6547202f, 0x6172656e, 0x20646574, 0x4e207962, 0x49444956, 0x564e2041, 0x43204d56, 0x69706d6f, 0xa72656c, 0x2f0a2f2f, 0x6f43202f, 0x6c69706d, 0x42207265, 0x646c6975, 0x3a444920, 0x2d4c4320, 0x39303433, 0x37363937, 0x202f2f0a, 0x61647543,
0x6d6f6320, 0x616c6970, 0x6e6f6974, 0x6f6f7420, 0x202c736c, 0x656c6572, 0x20657361, 0x342e3231, 0x3156202c, 0x2e342e32, 0xa313331, 0x42202f2f, 0x64657361, 0x206e6f20, 0x4d56564e, 0x302e3720, 0x2f0a312e, 0x2e0a0a2f, 0x73726576, 0x206e6f69,
0xa342e38, 0x7261742e, 0x20746567, 0x355f6d73, 0x612e0a30, 0x65726464, 0x735f7373, 0x20657a69, 0xa0a3436, 0x202f2f09, 0x6f6c672e, 0x5f096c62, 0x7961725f, 0x5f6e6567, 0x69616d5f, 0x632e0a6e, 0x74736e6f, 0x6c612e20, 0x206e6769, 0x622e2038,
0x61702038, 0x736d6172, 0x5d34325b, 0x2e0a0a3b, 0x69736976, 0x20656c62, 0x746e652e, 0x5f207972, 0x7961725f, 0x5f6e6567, 0x69616d5f, 0xa29286e, 0x2e090a7b, 0x20676572, 0x3233662e, 0x66250920, 0x3e30313c, 0x2e090a3b, 0x20676572, 0x3233622e,
0x72250920, 0x3e36323c, 0x2e090a3b, 0x20676572, 0x3436622e, 0x72250920, 0x30313c64, 0xa0a3b3e, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61, 0x31722528, 0x5f202c29, 0x6974706f, 0x65675f78, 0x616c5f74,
0x68636e75, 0x646e695f, 0x785f7865, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61, 0x32722528, 0x5f202c29, 0x6974706f, 0x65675f78,
0x616c5f74, 0x68636e75, 0x646e695f, 0x795f7865, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61, 0x33722528, 0x5f202c29, 0x6974706f,
0x65675f78, 0x616c5f74, 0x68636e75, 0x646e695f, 0x7a5f7865, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61, 0x34722528, 0x5f202c29,
0x6974706f, 0x65675f78, 0x616c5f74, 0x68636e75, 0x6d69645f, 0x69736e65, 0x785f6e6f, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61,
0x35722528, 0x5f202c29, 0x6974706f, 0x65675f78, 0x616c5f74, 0x68636e75, 0x6d69645f, 0x69736e65, 0x795f6e6f, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x616d090a, 0x6f6c2e64, 0x3233732e, 0x72250920, 0x202c3032,
0x2c357225, 0x33722520, 0x7225202c, 0x90a3b32, 0x2e64616d, 0x732e6f6c, 0x9203233, 0x31327225, 0x7225202c, 0x202c3032, 0x2c347225, 0x31722520, 0x6c090a3b, 0x6f632e64, 0x2e74736e, 0x20343675, 0x64722509, 0x5b202c32, 0x61726170, 0x382b736d,
0x90a3b5d, 0x61747663, 0x2e6f742e, 0x626f6c67, 0x752e6c61, 0x9203436, 0x33647225, 0x7225202c, 0xa3b3264, 0x6c756d09, 0x6469772e, 0x33752e65, 0x25092032, 0x2c346472, 0x32722520, 0x33202c31, 0x90a3b32, 0x2e646461, 0x20343673, 0x64722509,
0x25202c35, 0x2c336472, 0x64722520, 0x90a3b34, 0x672e646c, 0x61626f6c, 0x33662e6c, 0x25092032, 0x202c3166, 0x6472255b, 0xa3b5d35, 0x2e646c09, 0x626f6c67, 0x662e6c61, 0x9203233, 0x2c326625, 0x72255b20, 0x342b3564, 0x90a3b5d, 0x672e646c,
0x61626f6c, 0x33662e6c, 0x25092032, 0x202c3366, 0x6472255b, 0x5d382b35, 0x6c090a3b, 0x6c672e64, 0x6c61626f, 0x3233662e, 0x66250920, 0x5b202c37, 0x35647225, 0x5d32312b, 0x6c090a3b, 0x6c672e64, 0x6c61626f, 0x3233662e, 0x66250920, 0x5b202c34,
0x35647225, 0x5d36312b, 0x6c090a3b, 0x6c672e64, 0x6c61626f, 0x3233662e, 0x66250920, 0x5b202c35, 0x35647225, 0x5d30322b, 0x6c090a3b, 0x6c672e64, 0x6c61626f, 0x3233662e, 0x66250920, 0x5b202c36, 0x35647225, 0x5d34322b, 0x6c090a3b, 0x6c672e64,
0x6c61626f, 0x3233662e, 0x66250920, 0x5b202c38, 0x35647225, 0x5d38322b, 0x6c090a3b, 0x6f632e64, 0x2e74736e, 0x20343675, 0x64722509, 0x5b202c31, 0x61726170, 0x3b5d736d, 0x6f6d090a, 0x33662e76, 0x25092032, 0x202c3966, 0x30306630, 0x30303030,
0xa3b3030, 0x766f6d09, 0x3233752e, 0x72250920, 0x202c3431, 0x90a3b31, 0x2e766f6d, 0x20323375, 0x31722509, 0x30202c35, 0x2f090a3b, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x72252820, 0x25202c37, 0x202c3872,
0x2c397225, 0x31722520, 0x202c2930, 0x74706f5f, 0x745f7869, 0x65636172, 0x202c345f, 0x64722528, 0x25202c31, 0x202c3166, 0x2c326625, 0x33662520, 0x6625202c, 0x25202c34, 0x202c3566, 0x2c366625, 0x37662520, 0x6625202c, 0x25202c38, 0x202c3966,
0x34317225, 0x7225202c, 0x202c3531, 0x35317225, 0x7225202c, 0x202c3431, 0x35317225, 0x7225202c, 0x202c3232, 0x33327225, 0x7225202c, 0x202c3432, 0x35327225, 0x90a3b29, 0x65202f2f, 0x6920646e, 0x6e696c6e, 0x73612065, 0x6c090a6d, 0x6f632e64,
0x2e74736e, 0x20343675, 0x64722509, 0x5b202c36, 0x61726170, 0x312b736d, 0xa3b5d36, 0x74766309, 0x6f742e61, 0x6f6c672e, 0x2e6c6162, 0x20343675, 0x64722509, 0x25202c37, 0x3b366472, 0x756d090a, 0x69772e6c, 0x752e6564, 0x9203233, 0x38647225,
0x7225202c, 0x202c3132, 0xa3b3631, 0x64646109, 0x3436732e, 0x72250920, 0x202c3964, 0x37647225, 0x7225202c, 0xa3b3864, 0x2e747309, 0x626f6c67, 0x752e6c61, 0x9203233, 0x6472255b, 0x202c5d39, 0x3b377225, 0x7473090a, 0x6f6c672e, 0x2e6c6162,
0x20323375, 0x72255b09, 0x342b3964, 0x25202c5d, 0xa3b3872, 0x2e747309, 0x626f6c67, 0x752e6c61, 0x9203233, 0x6472255b, 0x5d382b39, 0x7225202c, 0x90a3b39, 0x672e7473, 0x61626f6c, 0x33752e6c, 0x5b092032, 0x39647225, 0x5d32312b, 0x7225202c,
0xa3b3031, 0x74657209, 0x7d0a0a3b, 0x2f2f090a, 0x6c672e20, 0x96c626f, 0x696d5f5f, 0x5f5f7373, 0x7373696d, 0x69762e0a, 0x6c626973, 0x652e2065, 0x7972746e, 0x6d5f5f20, 0x5f737369, 0x73696d5f, 0xa292873, 0x2e090a7b, 0x20676572, 0x3233622e,
0x72250920, 0x3b3e353c, 0x90a0a0a, 0x2e766f6d, 0x20323375, 0x31722509, 0x312d202c, 0x31323830, 0x33343033, 0x90a3b32, 0x62202f2f, 0x6e696765, 0x6c6e6920, 0x20656e69, 0xa6d7361, 0x6c616309, 0x6f5f206c, 0x78697470, 0x7465735f, 0x7961705f,
0x64616f6c, 0x202c305f, 0x31722528, 0x90a3b29, 0x65202f2f, 0x6920646e, 0x6e696c6e, 0x73612065, 0x6d090a6d, 0x752e766f, 0x9203233, 0x2c347225, 0xa3b3020, 0x202f2f09, 0x69676562, 0x6e69206e, 0x656e696c, 0x6d736120, 0x6163090a, 0x5f206c6c,
0x6974706f, 0x65735f78, 0x61705f74, 0x616f6c79, 0x2c315f64, 0x72252820, 0xa3b2934, 0x202f2f09, 0x20646e65, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x62202f2f, 0x6e696765, 0x6c6e6920, 0x20656e69, 0xa6d7361, 0x6c616309, 0x6f5f206c, 0x78697470,
0x7465735f, 0x7961705f, 0x64616f6c, 0x202c325f, 0x34722528, 0x90a3b29, 0x65202f2f, 0x6920646e, 0x6e696c6e, 0x73612065, 0x2f090a6d, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x706f5f20, 0x5f786974, 0x5f746573,
0x6c796170, 0x5f64616f, 0x28202c33, 0x29347225, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x6572090a, 0xa0a3b74, 0x2f090a7d, 0x672e202f, 0x6c626f6c, 0x635f5f09, 0x65736f6c, 0x69687473, 0x635f5f74, 0xa746968, 0x7369762e,
0x656c6269, 0x6e652e20, 0x20797274, 0x6c635f5f, 0x7365736f, 0x74696874, 0x68635f5f, 0x29287469, 0x90a7b0a, 0x6765722e, 0x72702e20, 0x9206465, 0x323c7025, 0x90a3b3e, 0x6765722e, 0x33662e20, 0x25092032, 0x31363c66, 0x90a3b3e, 0x6765722e,
0x33622e20, 0x25092032, 0x3e393c72, 0x2e090a3b, 0x20676572, 0x3436622e, 0x72250920, 0x3e333c64, 0xa0a0a3b, 0x202f2f09, 0x69676562, 0x6e69206e, 0x656e696c, 0x6d736120, 0x6163090a, 0x28206c6c, 0x31326625, 0x5f202c29, 0x6974706f, 0x65675f78,
0x61725f74, 0x6d745f79, 0x202c7861, 0xa3b2928, 0x202f2f09, 0x20646e65, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x62202f2f, 0x6e696765, 0x6c6e6920, 0x20656e69, 0xa6d7361, 0x6c616309, 0x2528206c, 0x29323266, 0x6f5f202c, 0x78697470, 0x7465675f,
0x726f775f, 0x725f646c, 0x645f7961, 0x63657269, 0x6e6f6974, 0x202c785f, 0xa3b2928, 0x202f2f09, 0x20646e65, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x62202f2f, 0x6e696765, 0x6c6e6920, 0x20656e69, 0xa6d7361, 0x6c616309, 0x2528206c, 0x29333266,
0x6f5f202c, 0x78697470, 0x7465675f, 0x726f775f, 0x725f646c, 0x645f7961, 0x63657269, 0x6e6f6974, 0x202c795f, 0xa3b2928, 0x202f2f09, 0x20646e65, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x62202f2f, 0x6e696765, 0x6c6e6920, 0x20656e69, 0xa6d7361,
0x6c616309, 0x2528206c, 0x29343266, 0x6f5f202c, 0x78697470, 0x7465675f, 0x726f775f, 0x725f646c, 0x645f7961, 0x63657269, 0x6e6f6974, 0x202c7a5f, 0xa3b2928, 0x202f2f09, 0x20646e65, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x62202f2f, 0x6e696765,
0x6c6e6920, 0x20656e69, 0xa6d7361, 0x6c616309, 0x2528206c, 0x29316472, 0x6f5f202c, 0x78697470, 0x7465675f, 0x7361675f, 0x6172745f, 0x73726576, 0x656c6261, 0x6e61685f, 0x2c656c64, 0x3b292820, 0x2f2f090a, 0x646e6520, 0x6c6e6920, 0x20656e69,
0xa6d7361, 0x202f2f09, 0x69676562, 0x6e69206e, 0x656e696c, 0x6d736120, 0x6163090a, 0x28206c6c, 0x29317225, 0x6f5f202c, 0x78697470, 0x6165725f, 0x72705f64, 0x74696d69, 0x5f657669, 0x2c786469, 0x3b292820, 0x2f2f090a, 0x646e6520, 0x6c6e6920,
0x20656e69, 0xa6d7361, 0x202f2f09, 0x69676562, 0x6e69206e, 0x656e696c, 0x6d736120, 0x6163090a, 0x28206c6c, 0x29327225, 0x6f5f202c, 0x78697470, 0x6165725f, 0x62735f64, 0x61675f74, 0x64695f73, 0x28202c78, 0x90a3b29, 0x65202f2f, 0x6920646e,
0x6e696c6e, 0x73612065, 0x2f090a6d, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x66252820, 0x2c293532, 0x706f5f20, 0x5f786974, 0x5f746567, 0x5f796172, 0x656d6974, 0x2928202c, 0x2f090a3b, 0x6e65202f, 0x6e692064,
0x656e696c, 0x6d736120, 0x2f2f090a, 0x67656220, 0x69206e69, 0x6e696c6e, 0x73612065, 0x63090a6d, 0x206c6c61, 0x32662528, 0x25202c36, 0x2c373266, 0x32662520, 0x25202c38, 0x2c393266, 0x33662520, 0x25202c30, 0x2c313366, 0x33662520, 0x25202c32,
0x2c333366, 0x33662520, 0x202c2934, 0x74706f5f, 0x675f7869, 0x745f7465, 0x6e616972, 0x5f656c67, 0x74726576, 0x645f7865, 0x2c617461, 0x72252820, 0x202c3164, 0x2c317225, 0x32722520, 0x6625202c, 0x3b293532, 0x2f2f090a, 0x646e6520, 0x6c6e6920,
0x20656e69, 0xa6d7361, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3633, 0x39326625, 0x6625202c, 0xa3b3632, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3733, 0x30336625, 0x6625202c, 0xa3b3732, 0x62757309, 0x7a74662e,
0x3233662e, 0x66250920, 0x202c3833, 0x31336625, 0x6625202c, 0xa3b3832, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3933, 0x32336625, 0x6625202c, 0xa3b3632, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3034, 0x33336625,
0x6625202c, 0xa3b3732, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3134, 0x34336625, 0x6625202c, 0xa3b3832, 0x6c756d09, 0x7a74662e, 0x3233662e, 0x66250920, 0x25202c32, 0x2c373366, 0x34662520, 0x90a3b31, 0x2e6c756d, 0x2e7a7466,
0x20323366, 0x33662509, 0x6625202c, 0x202c3833, 0x30346625, 0x73090a3b, 0x662e6275, 0x662e7a74, 0x9203233, 0x2c346625, 0x32662520, 0x6625202c, 0x90a3b33, 0x2e6c756d, 0x2e7a7466, 0x20323366, 0x35662509, 0x6625202c, 0x202c3633, 0x31346625,
0x6d090a3b, 0x662e6c75, 0x662e7a74, 0x9203233, 0x2c366625, 0x33662520, 0x25202c38, 0x3b393366, 0x7573090a, 0x74662e62, 0x33662e7a, 0x25092032, 0x202c3766, 0x2c356625, 0x36662520, 0x6d090a3b, 0x662e6c75, 0x662e7a74, 0x9203233, 0x2c386625,
0x33662520, 0x25202c36, 0x3b303466, 0x756d090a, 0x74662e6c, 0x33662e7a, 0x25092032, 0x202c3966, 0x37336625, 0x6625202c, 0xa3b3933, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3031, 0x2c386625, 0x39662520, 0x6e090a3b, 0x662e6765,
0x662e7a74, 0x9203233, 0x31316625, 0x6625202c, 0x90a3b37, 0x2e6c756d, 0x2e7a7466, 0x20323366, 0x34662509, 0x25202c32, 0x2c323266, 0x34662520, 0x6d090a3b, 0x662e6c75, 0x662e7a74, 0x9203233, 0x33346625, 0x6625202c, 0x202c3332, 0x3b376625,
0x7573090a, 0x74662e62, 0x33662e7a, 0x25092032, 0x2c343466, 0x34662520, 0x25202c32, 0x3b333466, 0x6d66090a, 0x6e722e61, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3534, 0x34326625, 0x6625202c, 0x202c3031, 0x34346625, 0x73090a3b, 0x2e707465,
0x2e757467, 0x2e7a7466, 0x20323366, 0x31702509, 0x6625202c, 0x202c3534, 0x30306630, 0x30303030, 0xa3b3030, 0x70254009, 0x72622031, 0x24092061, 0x425f5f4c, 0x325f3242, 0x62090a3b, 0x752e6172, 0x920696e, 0x5f5f4c24, 0x5f324242, 0xa0a3b31,
0x5f5f4c24, 0x5f324242, 0x90a3a32, 0x2e627573, 0x2e7a7466, 0x20323366, 0x35662509, 0x25202c30, 0x202c3366, 0x3b326625, 0x7573090a, 0x74662e62, 0x33662e7a, 0x25092032, 0x2c313566, 0x36662520, 0x6625202c, 0x90a3b35, 0x2e6c756d, 0x2e7a7466,
0x20323366, 0x35662509, 0x25202c32, 0x2c313566, 0x35662520, 0x90a3b31, 0x2e616d66, 0x662e6e72, 0x662e7a74, 0x9203233, 0x33356625, 0x6625202c, 0x202c3035, 0x30356625, 0x6625202c, 0xa3b3235, 0x62757309, 0x7a74662e, 0x3233662e, 0x66250920,
0x202c3435, 0x2c396625, 0x38662520, 0x66090a3b, 0x722e616d, 0x74662e6e, 0x33662e7a, 0x25092032, 0x2c353566, 0x35662520, 0x25202c34, 0x2c343566, 0x35662520, 0x90a3b33, 0x72717372, 0x70612e74, 0x786f7270, 0x7a74662e, 0x3233662e, 0x66250920,
0x202c3635, 0x35356625, 0x6d090a3b, 0x662e6c75, 0x662e7a74, 0x9203233, 0x30366625, 0x6625202c, 0x202c3035, 0x36356625, 0x6d090a3b, 0x662e6c75, 0x662e7a74, 0x9203233, 0x37356625, 0x6625202c, 0x202c3135, 0x36356625, 0x6e090a3b, 0x662e6765,
0x662e7a74, 0x9203233, 0x39356625, 0x6625202c, 0xa3b3735, 0x6c756d09, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3835, 0x34356625, 0x6625202c, 0xa3b3635, 0x61726209, 0x696e752e, 0x4c240920, 0x42425f5f, 0x3b335f32, 0x4c240a0a, 0x42425f5f,
0x3a315f32, 0x756d090a, 0x74662e6c, 0x33662e7a, 0x25092032, 0x2c363466, 0x37662520, 0x6625202c, 0x90a3b37, 0x2e616d66, 0x662e6e72, 0x662e7a74, 0x9203233, 0x37346625, 0x6625202c, 0x25202c34, 0x202c3466, 0x36346625, 0x66090a3b, 0x722e616d,
0x74662e6e, 0x33662e7a, 0x25092032, 0x2c383466, 0x31662520, 0x25202c30, 0x2c303166, 0x34662520, 0x90a3b37, 0x72717372, 0x70612e74, 0x786f7270, 0x7a74662e, 0x3233662e, 0x66250920, 0x202c3934, 0x38346625, 0x6d090a3b, 0x662e6c75, 0x662e7a74,
0x9203233, 0x30366625, 0x6625202c, 0x25202c34, 0x3b393466, 0x756d090a, 0x74662e6c, 0x33662e7a, 0x25092032, 0x2c393566, 0x34662520, 0x25202c39, 0x3b313166, 0x756d090a, 0x74662e6c, 0x33662e7a, 0x25092032, 0x2c383566, 0x31662520, 0x25202c30,
0x3b393466, 0x4c240a0a, 0x42425f5f, 0x3a335f32, 0x6f6d090a, 0x33622e76, 0x25092032, 0x202c3572, 0x31326625, 0x2f090a3b, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x706f5f20, 0x5f786974, 0x5f746573, 0x6c796170,
0x5f64616f, 0x28202c30, 0x29357225, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x6f6d090a, 0x33622e76, 0x25092032, 0x202c3672, 0x30366625, 0x2f090a3b, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163,
0x706f5f20, 0x5f786974, 0x5f746573, 0x6c796170, 0x5f64616f, 0x28202c31, 0x29367225, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x6f6d090a, 0x33622e76, 0x25092032, 0x202c3772, 0x39356625, 0x2f090a3b, 0x6562202f, 0x206e6967,
0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x706f5f20, 0x5f786974, 0x5f746573, 0x6c796170, 0x5f64616f, 0x28202c32, 0x29377225, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120, 0x6f6d090a, 0x33622e76, 0x25092032, 0x202c3872,
0x38356625, 0x2f090a3b, 0x6562202f, 0x206e6967, 0x696c6e69, 0x6120656e, 0x90a6d73, 0x6c6c6163, 0x706f5f20, 0x5f786974, 0x5f746573, 0x6c796170, 0x5f64616f, 0x28202c33, 0x29387225, 0x2f090a3b, 0x6e65202f, 0x6e692064, 0x656e696c, 0x6d736120,
0x6572090a, 0xa0a3b74, 0xa0a7d, 0x0 };

